<?php 
class DB
{
	////////////////////////////////////////////////////////////////////
	//		ПЕРЕМЕННЫЕ ДЛЯ РАБОТЫ С КЛАССОМ DB		  //
	////////////////////////////////////////////////////////////////////
    private $dataset = ""; #для хранения результата запроса
    private $record  = ""; #для хранения текущей записи
    public $link         ; #для хранения линка к базе данных
	public $query		 ; #для хранения текста запроса
    
	////////////////////////////////////////////////////////////////////
	//		ФУНКЦИИ ДЛЯ РАБОТЫ С КЛАССОМ DB			  //
	////////////////////////////////////////////////////////////////////
	//------------------------------------------------------------------
	# Функция получения линка к БД
	function DB_CONNECT($args)
		{	
			$this->link = ibase_connect($args[0], $args[1], $args[2], $args[3]) or die (ibase_errmsg());
		}		
	//------------------------------------------------------------------
	# Функция выполнения запроса к БД	
	function QUERY()
		{
			$this->dataset = ibase_query($this->link, $this->query) or die(ibase_errmsg());
			return $this->dataset;
		}
	//------------------------------------------------------------------
	# Функция получения следующей строки результата запроса
	function NEXT()
		{
			// Функция перемещает от строки к строке результата, если строка не существует она вернет FALSE
			if($this->record = ibase_fetch_assoc ($this->dataset))
				{
					return TRUE;
				}
			else
				{	
					return FALSE;
				}
		}
	//------------------------------------------------------------------
	# Функция подсчета строк результата	
	function NUM_ROW()
		{
			$i = 0;
			while ($row[$i] = ibase_fetch_assoc($this->dataset))
				$i++;
			
			$this->REPEAT();
			
			return $i;
		}
	//------------------------------------------------------------------
	# Функция получения значения поля 	
	function FIELD_VALUE($field)
		{
			return $this->record[$field];
		}
	//------------------------------------------------------------------
	# Функция повтора запроса
	function REPEAT()
		{
			$this->CLEAR_DATASET();
			$this->QUERY();
		}
	//------------------------------------------------------------------
	# Функция очистки результатов запроса	
	function CLEAR_DATASET()
		{
			$this->dataset = "";
		}
	//------------------------------------------------------------------
	# Функция формирования массива из строк результата запроса.
	# Если передать название поля в метод, то на выходе будет массив
	# со значениями заданного столбца : "значение №1", "значение №2", ... . 
	# Если не передавать аргументы в метод, то на выходе будет массив, каждый элемент которого это тоже,
	# в свою очередь, массив, вида : "поле №1" => "значение", "поле №2" => "значение", ...  	
	function MAKE_ARRAY($field = '0')
	{	
		$OUTPUT = array();
		
		while ($this->NEXT())
			{
				array_push($OUTPUT,$field ? $this->FIELD_VALUE($field) : $this->record);
			}
			
		return $OUTPUT;
	}
}
?>
